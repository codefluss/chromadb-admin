name: Production Docker Client CI

on:
  push:
    branches: [main]
    # paths:
    #   - "src/**"
    #   - ".github/**"
  workflow_dispatch:

permissions:
  packages: write
  contents: read

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Get code
  #       uses: actions/checkout@v4

  #     - name: Install pnpm
  #       uses: pnpm/action-setup@v4
  #       with:
  #         version: 9

  #     - name: Install Nodejs
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "22"
  #         cache: "pnpm"

  #     - name: Cache dependencies
  #       uses: actions/cache@v4
  #       with:
  #         path: ~/.pnpm-store
  #         key: deps-presence-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}

  #     - name: Install dependencies
  #       run: |
  #         pnpm i

  #     - name: Run tests
  #       run: pnpm test

  build:
    runs-on: ubuntu-latest
    # needs: test
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/chromadb-admin-presence-client
          tags: |
            type=raw,value=latest
            type=sha,prefix={{branch}}-

      - name: Create .env.production file
        run: echo "${{ secrets.ENV_PRODUCTION }}" > .env.production

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/production/Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/image.tar

  push:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/image.tar

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        run: docker push ghcr.io/${{ github.repository_owner }}/chromadb-admin-presence-client:latest

